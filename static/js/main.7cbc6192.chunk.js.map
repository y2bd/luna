{"version":3,"sources":["reddit/reddit.ts","reddit/oauth.ts","reddit/url.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sort","useOAuth","React","accessToken","setAccessToken","form","URLSearchParams","append","fetch","method","body","headers","Authorization","then","response","json","access_token","useUrl","subreddit","setSubreddit","article","setArticle","onHash","window","location","hash","match","sub","art","undefined","document","title","goHome","goToArticle","addEventListener","removeEventListener","PostsView","sort","Best","posts","setPosts","loading","setLoading","error","setError","data","children","catch","err","useSubreddit","className","message","map","post","key","id","PostView","expanded","permalink","url","selftext_html","onDivClick","open","onCommentClick","evt","stopPropagation","onLinkClick","preventDefault","domain","onClick","href","dangerouslySetInnerHTML","__html","RepliesView","setPost","replies","setReplies","usePost","querySelectorAll","forEach","elem","anchor","target","includes","host","slice","origin","length","reply","index","ReplyView","indent","body_html","setExpanded","divRef","hasChildren","filter","child","isFirst","isTop","ref","e","tagName","toLowerCase","getSelection","toString","style","display","Array","fill","author","App","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7cbc6192.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useOAuth } from \"./oauth\";\n\nexport interface PostListing {\n  kind: \"Listing\";\n  data: {\n    dist: number;\n    before: string | undefined;\n    after: string | undefined;\n    children: Post[];\n  };\n}\n\nexport interface Post {\n  kind: \"t3\";\n  data: {\n    id: string;\n    name: string;\n    title: string;\n    author: string;\n    score: number;\n    permalink: string;\n    url: string;\n    created_utc: number;\n    subreddit: string;\n    selftext_html: string;\n  };\n\n  expanded?: boolean;\n}\n\nexport interface ReplyListing {\n  kind: \"Listing\";\n  data: {\n    dist: number;\n    before: string | undefined;\n    after: string | undefined;\n    children: Reply[];\n  };\n}\n\nexport interface Reply {\n  kind: \"t1\";\n  data: {\n    id: string;\n    name: string;\n    title: string;\n    author: string;\n    score: number;\n    permalink: string;\n    created_utc: number;\n    body: string;\n    body_html: string;\n    replies: ReplyListing;\n  };\n\n  indent?: number;\n  index?: number;\n  top?: boolean;\n}\n\nexport enum Sort {\n  Best = \"best\",\n  New = \"new\"\n}\n\nexport function useSubreddit(subreddit: string, sort: Sort = Sort.Best) {\n  const [posts, setPosts] = React.useState<Post[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<Error | undefined>(undefined);\n  const { accessToken } = useOAuth();\n\n  React.useEffect(() => {\n    setLoading(true);\n    if (!accessToken) {\n      return;\n    }\n\n    fetch(`https://oauth.reddit.com/r/${subreddit}/${sort}.json?raw_json=1`, {\n      headers: {\n        Authorization: \"bearer \" + accessToken,\n        \"User-Agent\": \"web:me.y2bd.luna:v0.1.0 (by /u/y2bd)\"\n      }\n    })\n      .then(response => response.json())\n      .then((json: PostListing) => {\n        setPosts(json.data.children);\n        setLoading(false);\n        setError(undefined);\n      })\n      .catch(err => {\n        setError(err);\n        setLoading(false);\n      });\n  }, [accessToken, subreddit, sort]);\n\n  return { posts, loading, error };\n}\n\nexport function usePost(subreddit: string, article: string) {\n  const [post, setPost] = React.useState<Post | undefined>();\n  const [replies, setReplies] = React.useState<Reply[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<Error | undefined>(undefined);\n  const { accessToken } = useOAuth();\n\n  React.useEffect(() => {\n    setLoading(true);\n    if (!accessToken) {\n      return;\n    }\n\n    fetch(\n      `https://oauth.reddit.com/r/${subreddit}/comments/${article}.json?raw_json=1`,\n      {\n        headers: {\n          Authorization: \"bearer \" + accessToken,\n          \"User-Agent\": \"web:me.y2bd.luna:v0.1.0 (by /u/y2bd)\"\n        }\n      }\n    )\n      .then(response => response.json())\n      .then((json: [PostListing, ReplyListing]) => {\n        setPost(json[0].data.children[0]);\n        setReplies(json[1].data.children);\n        setError(undefined);\n        setLoading(false);\n      })\n      .catch(err => {\n        setError(err);\n        setLoading(false);\n      });\n  }, [subreddit, article, accessToken]);\n\n  return { post, replies, loading, error };\n}\n","import * as React from \"react\";\n\nexport function useOAuth() {\n  const [accessToken, setAccessToken] = React.useState<string>();\n\n  const form = new URLSearchParams();\n  form.append(\"grant_type\", \"https://oauth.reddit.com/grants/installed_client\");\n  form.append(\"device_id\", \"DO_NOT_TRACK_THIS_DEVICE\");\n\n  React.useEffect(() => {\n    fetch(\"https://www.reddit.com/api/v1/access_token\", {\n      method: \"POST\",\n      body: form,\n      headers: {\n        Authorization: \"Basic RDVOdkpIcmN0UFNFTWc6\",\n        \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\"\n      }\n    })\n      .then(response => response.json())\n      .then(json => {\n        setAccessToken(json?.access_token);\n      });\n  }, []);\n\n  return { accessToken };\n}\n","import * as React from \"react\";\n\nexport function useUrl() {\n  const [subreddit, setSubreddit] = React.useState<string>();\n  const [article, setArticle] = React.useState<string>();\n\n  const onHash = React.useCallback(() => {\n    const hash = window.location.hash;\n    if (!hash) {\n      window.location.hash = \"popular\";\n      return;\n    }\n\n    const match = window.location.hash.match(\n      \"^#?([A-Za-z0-9_]+)/?([A-Za-z0-9_]+)?$\"\n    );\n\n    const [_, sub, art] = match ?? [];\n    setSubreddit(sub || undefined);\n    setArticle(art || undefined);\n\n    if (sub) {\n      document.title = \"Luna - \" + sub;\n    } else {\n      document.title = \"Luna\";\n    }\n  }, [setSubreddit, setArticle]);\n\n  const goHome = React.useCallback(() => {\n    window.location.hash = subreddit || \"\";\n  }, [subreddit]);\n\n  const goToArticle = React.useCallback((sub: string, art: string) => {\n    window.location.hash = `${sub}/${art}`;\n  }, []);\n\n  React.useEffect(() => {\n    window.addEventListener(\"hashchange\", onHash);\n    onHash();\n    return () => window.removeEventListener(\"hashchange\", onHash);\n  });\n\n  return { subreddit, article, goHome, goToArticle };\n}\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { useSubreddit, Post, usePost, Reply } from \"./reddit/reddit\";\nimport { useUrl } from \"./reddit/url\";\n\nfunction App() {\n  const { subreddit, article } = useUrl();\n\n  if (subreddit && article) {\n    return <RepliesView subreddit={subreddit} article={article} />;\n  } else if (subreddit) {\n    return <PostsView subreddit={subreddit} />;\n  } else {\n    return <div className=\"App\">{<p>Loading...</p>}</div>;\n  }\n}\n\nconst PostsView: React.FC<{ subreddit: string }> = ({ subreddit }) => {\n  const { posts, loading, error } = useSubreddit(subreddit);\n  return (\n    <div className=\"App\">\n      {loading && <p>Loading...</p>}\n      {error && <p>Error Whoops... {error.message}</p>}\n      {posts && posts.map(post => <PostView key={post.data.id} {...post} />)}\n    </div>\n  );\n};\n\nconst PostView: React.FC<Post> = post => {\n  const { goToArticle } = useUrl();\n  const { expanded } = post;\n  const { id, permalink, url, subreddit, selftext_html } = post.data;\n  const onDivClick = React.useCallback(() => window.open(url), [permalink]);\n\n  const onCommentClick = React.useCallback(\n    (evt: React.MouseEvent<HTMLAnchorElement, MouseEvent>): void => {\n      evt.stopPropagation();\n      goToArticle(subreddit!, id);\n    },\n    [subreddit, id]\n  );\n\n  const onLinkClick = React.useCallback(\n    (evt: React.MouseEvent<HTMLAnchorElement, MouseEvent>): void =>\n      evt.preventDefault(),\n    []\n  );\n\n  const domain = React.useMemo(\n    () => url.match(\"^https?://(?:www\\\\.)?(.+?)(?:/.*)?$\")?.[1],\n    [url]\n  );\n\n  return (\n    <div className=\"Post\" onClick={onDivClick}>\n      <div className=\"PostData\">\n        <a href={url} onClick={onLinkClick}>\n          {post.data.title}\n        </a>\n        <aside>{domain}</aside>\n        {expanded && selftext_html && (\n          <article dangerouslySetInnerHTML={{ __html: selftext_html }} />\n        )}\n      </div>\n      {!expanded && (\n        <aside className=\"CommentButton\" onClick={onCommentClick}>\n          <a>❞</a>\n        </aside>\n      )}\n    </div>\n  );\n};\n\nconst RepliesView: React.FC<{ subreddit: string; article: string }> = ({\n  subreddit,\n  article\n}) => {\n  const { post, replies, loading, error } = usePost(subreddit, article);\n\n  React.useLayoutEffect(() => {\n    const anchors = document.querySelectorAll(\".ReplyData .md a\");\n    anchors.forEach(elem => {\n      const anchor = elem as HTMLAnchorElement;\n      anchor.target = \"_blank\";\n      if (anchor.href.includes(window.location.host)) {\n        anchor.href =\n          \"https://reddit.com\" +\n          anchor.href.slice(window.location.origin.length);\n      }\n    });\n  }, [replies]);\n\n  return (\n    <div className=\"App\">\n      {loading && <p>Loading...</p>}\n      {error && <p>Error Whoops... {error.message}</p>}\n      {post && <PostView expanded {...post} />}\n      {replies &&\n        replies.map(reply => (\n          <ReplyView key={reply.data.id} index={-1} {...reply} />\n        ))}\n    </div>\n  );\n};\n\nconst ReplyView: React.FC<Reply> = reply => {\n  const { indent = 0, index } = reply;\n  const { body_html, replies } = reply.data;\n\n  const [expanded, setExpanded] = React.useState(true);\n\n  const divRef = React.useRef<HTMLDivElement | null>(null);\n\n  const hasChildren =\n    (replies?.data?.children.filter(child => !!child.data.body).length ?? 0) >\n    0;\n  const isFirst = index === 0;\n  const isTop = index === -1;\n\n  return (\n    <>\n      <div\n        className={\"Reply \" + (isTop ? \"Top \" : \"\")}\n        ref={divRef}\n        onClick={(e: any) => {\n          if (!hasChildren) return;\n          if (\n            e.target.tagName.toLowerCase() !== \"a\" &&\n            !window.getSelection()?.toString()\n          )\n            setExpanded(!expanded);\n        }}\n      >\n        <div style={{ display: \"flex\" }}>\n          {new Array(indent).fill(0).map(() => (\n            <div className=\"Indent\" />\n          ))}\n        </div>\n        <div\n          className={\n            \"ReplyData \" +\n            (hasChildren ? \"Children \" : \"\") +\n            (isFirst ? \"First \" : \"\")\n          }\n        >\n          <article dangerouslySetInnerHTML={{ __html: body_html }} />\n        </div>\n      </div>\n      {expanded &&\n        replies &&\n        replies.data.children\n          .filter(reply => !!reply.data.body)\n          .map((reply, index) => (\n            <ReplyView\n              key={reply.data.id + reply.data.author}\n              index={index}\n              indent={indent + 1}\n              {...reply}\n            />\n          ))}\n      {!expanded && <div className=\"Collapsed\" />}\n\n      {isTop && <div className=\"Collapsed\" />}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}